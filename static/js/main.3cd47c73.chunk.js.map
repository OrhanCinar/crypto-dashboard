{"version":3,"sources":["components/Coincard.jsx","App.js","index.js"],"names":["CoinCard","coinMap","this","props","coins","map","coin","react_default","a","createElement","ListGroupItem","key","id","price","Container","Row","ListGroup","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","startWebSocket","_this2","ws","WebSocket","onopen","console","log","onclose","onerror","event","concat","onmessage","e","data","JSON","parse","coinName","s","c","toConsumableArray","coinIdx","findIndex","setState","className","Fragment","Col","Coincard","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"0TA0BeA,mLAtBJ,IAGDC,EAFYC,KAAKC,MAAfC,MAEcC,IAAI,SAAAC,GAAI,OAC5BC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAeC,IAAKL,EAAKM,IACtBN,EAAKM,GACNL,EAAAC,EAAAC,cAAA,UAAKH,EAAKO,UAId,OACEN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KAEIP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAACO,EAAA,EAAD,KAAYf,YAfDgB,qBCoFRC,2BA7Eb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAlB,KAAAgB,IACZC,EAAAC,OAAAE,EAAA,EAAAF,CAAAlB,KAAAkB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAtB,QAEKuB,MAAQ,CACXrB,MAAO,CACL,CAAEQ,GAAI,SAAUC,MAAO,GACvB,CAAED,GAAI,SAAUC,MAAO,GACvB,CAAED,GAAI,UAAWC,MAAO,GACxB,CAAED,GAAI,UAAWC,MAAO,KARhBM,mFAcZjB,KAAKwB,0DAGU,IAAAC,EAAAzB,KACfA,KAAK0B,GAAK,IAAIC,UAEZ,8GAIF3B,KAAK0B,GAAGE,OAAS,WACfC,QAAQC,IAAI,YAGd9B,KAAK0B,GAAGK,QAAU,WAChBF,QAAQC,IAAI,YAGd9B,KAAK0B,GAAGM,QAAU,SAAAC,GAChBJ,QAAQC,IAAR,WAAAI,OAAuBD,KAGzBjC,KAAK0B,GAAGS,UAAY,SAAAC,GAClB,IAAMC,EAAOC,KAAKC,MAAMH,EAAEC,MACpBG,EAAWH,EAAKI,EAIhB9B,EAAQ0B,EAAKK,EACbxC,EAAKgB,OAAAyB,EAAA,EAAAzB,CAAOO,EAAKF,MAAMrB,OAEvB0C,EAAU1C,EAAM2C,UAAU,SAAAH,GAAC,OAAIA,EAAEhC,KAAO8B,IAE1CtC,EAAM0C,GAASjC,QAAUA,IAC3BT,EAAM0C,GAASjC,MAAQA,EACvBc,EAAKqB,SAAS,CAAE5C,6CAQpB,OACEG,EAAAC,EAAAC,cAAA,OAAKwC,UAAU,OAEX1C,EAAAC,EAAAC,cAACF,EAAAC,EAAM0C,SAAP,KACE3C,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,cAIJ5C,EAAAC,EAAAC,cAAC2C,EAAD,CAAUhD,MAAOF,KAAKuB,MAAMrB,QAE5BG,EAAAC,EAAAC,cAACK,EAAA,EAAD,eAtEMG,oBCDlBoC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.3cd47c73.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Container, Row, Col, ListGroup, ListGroupItem } from \"reactstrap\";\r\n\r\nclass CoinCard extends Component {\r\n  render() {\r\n    const { coins } = this.props;\r\n\r\n    const coinMap = coins.map(coin => (\r\n      <ListGroupItem key={coin.id}>\r\n        {coin.id}\r\n        <h5>{coin.price}</h5>\r\n      </ListGroupItem>\r\n    ));\r\n\r\n    return (\r\n      <Container>\r\n        {\r\n          <Row>\r\n            <ListGroup>{coinMap}</ListGroup>\r\n          </Row>\r\n        }\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CoinCard;\r\n","import React, { Component } from \"react\";\nimport CoinCard from \"./components/Coincard\";\n\nimport { Container, Row, Col } from \"reactstrap\";\n\nimport startWebSocket from \"./components/binance-websocket\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      coins: [\n        { id: \"ETHBTC\", price: 0 },\n        { id: \"XLMBTC\", price: 0 },\n        { id: \"TUSDBTC\", price: 0 },\n        { id: \"BTCUSDT\", price: 0 }\n      ]\n    };\n  }\n\n  componentDidMount() {\n    this.startWebSocket();\n  }\n\n  startWebSocket() {\n    this.ws = new WebSocket(\n      //\"wss://stream.binance.com:9443/ws/ethbtc@miniTicker\" // single coin\n      \"wss://stream.binance.com:9443/ws/ethbtc@miniTicker/xlmbtc@miniTicker/tusdbtc@miniTicker/btcusdt@miniTicker\"\n      //\"wss://stream.binance.com:9443/ws/!miniTicker@arr\"\n    );\n\n    this.ws.onopen = () => {\n      console.log(\"opening\");\n    };\n\n    this.ws.onclose = () => {\n      console.log(\"closing\");\n    };\n\n    this.ws.onerror = event => {\n      console.log(`Error : ${event}`);\n    };\n\n    this.ws.onmessage = e => {\n      const data = JSON.parse(e.data);\n      const coinName = data.s;\n\n      //console.log(\"Coin\" + coinName);\n\n      const price = data.c;\n      const coins = [...this.state.coins];\n\n      const coinIdx = coins.findIndex(c => c.id === coinName);\n\n      if (coins[coinIdx].price !== price) {\n        coins[coinIdx].price = price;\n        this.setState({ coins });\n        //console.log(\"update\" + coins[coinIdx].id );\n        //this.forceUpdate();\n      }\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {\n          <React.Fragment>\n            <Container>\n              <Row>\n                <Col>TOP</Col>\n              </Row>\n            </Container>\n\n            <CoinCard coins={this.state.coins} />\n\n            <Container />\n          </React.Fragment>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}